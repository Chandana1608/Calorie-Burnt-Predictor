# -*- coding: utf-8 -*-
"""Copy of MLGproj1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bHZToasSGHUt6h932MdJ7rSGf6MfwmOg
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn.linear_model import LinearRegression
#from sklearn.linear_model import Ridge,Lasso
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
from statsmodels.stats.outliers_influence import variance_inflation_factor
import pickle

import warnings
from warnings import filterwarnings
filterwarnings("ignore")
sns.set()

calories = pd.read_csv("/content/calories.csv")

calories.head()

calories.shape

exercise=pd.read_csv("/content/exercise.csv")

exercise.head()

exercise.shape

data=pd.concat([exercise,calories["Calories"]],axis=1)

data.head()

data.shape

data.info()

data.describe()

data.isnull().sum()

data.drop(columns = ["User_ID"],axis=1,inplace =True)

data.head()

data.info()

#Separate Categorical and Numerical Features
#1.Categorical Feature

cat_col=[col for col in data.columns if data[col].dtype=='O']
cat_col

data["Gender"].value_counts()

sns.countplot(data['Gender'])
plt.show()

#pd.get_dummies(data["Gender"],drop_first=True)

categorical = data[cat_col]
categorical.head()

categorical = pd.get_dummies(categorical["Gender"],drop_first=True)

categorical

Num_col = [col for col in data.columns if data[col].dtype != "O"]
Num_col

data[Num_col].shape

Numerical = data[Num_col]
Numerical.head()

Numerical.shape

plt.figure(figsize=(20,15))
plotnumber = 1

for column in Numerical:
  if plotnumber <= 8:
    ax = plt.subplot(3,3,plotnumber)
    sns.distplot(Numerical[column])
    plt.xlabel(column,fontsize=15)
  plotnumber+=1
plt.show()

# constructing a heatmap to understand the correlation

plt.figure(figsize=(10,10))
sns.heatmap(Numerical.corr(), cmap='Blues',annot = True)

data1 = pd.concat([categorical,Numerical],axis=1)

data1.head()

fig,ax = plt.subplots(figsize = (15,10))
sns.boxplot(data=data,width = 0.5,fliersize = 3,ax=ax)

plt.figure(figsize=(20,15))
plotnumber = 1

for column in data1:
  if plotnumber <= 8:
    ax = plt.subplot(3,3,plotnumber)
    sns.distplot(data1[column])
    plt.xlabel(column,fontsize=15)
  plotnumber+=1
plt.show()

data1.columns

X = data1.drop(columns = ["Calories"],axis = 1)
y = data1["Calories"]

X.head()

y.head()

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state=1)

print("Shape of X Train: ",X_train.shape)
print("Shape of X Test: ",X_test.shape)
print("Shape of y Train: ",y_train.shape)
print("Shape of y Test: ",y_test.shape)

#from sklearn import metrics
def predict(ml_model):
    model=ml_model.fit(X_train,y_train)
    print('Score : {}'.format(model.score(X_train,y_train)))
    y_prediction=model.predict(X_test)
    print('predictions are: \n {}'.format(y_prediction))
    print('\n')

    r2_score=metrics.r2_score(y_test,y_prediction)
    print('r2 score: {}'.format(r2_score))

    print('MAE:',metrics.mean_absolute_error(y_test,y_prediction))
    print('MSE:',metrics.mean_squared_error(y_test,y_prediction))
    print('RMSE:',np.sqrt(metrics.mean_squared_error(y_test,y_prediction)))

    sns.distplot(y_test-y_prediction)
    return model

model_regression = predict(XGBRegressor())
model_regression

input_data = np.asarray([0, 68, 190.0, 94.0, 29.0, 105.0, 40.8]).reshape(1, -1)
y_prediction=model_regression.predict(input_data)[0]
print(y_prediction)

# saving the model to the local file system
#filename = 'finalized_model.pickle'
#pickle.dump(model_regression, open(filename, 'wb'))

predict(LinearRegression())

predict(RandomForestRegressor())

predict(DecisionTreeRegressor())

from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import cross_val_score
model_validation = cross_val_score(GradientBoostingRegressor(), X, y, cv=5)
model_validation

np.mean(model_validation)

import joblib

filename = 'calories_burnt.sav'
joblib.dump(model_regression, filename)